<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>steganography on Osint For All</title>
    <link>/tags/steganography/</link>
    <description>Recent content in steganography on Osint For All</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/tags/steganography/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Steganographic Tools For Beginners</title>
      <link>/articles/steganography/steganography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/steganography/steganography/</guid>
      <description>Hiding in plain sight has many dimensions. Sometimes, whatever you are looking for is before you, but you cannot see it; other times, it’s right before you but you don’t notice.
Steganography has been an art since the ancient days used to write hidden messages. It has evolved over the ages, and has changed form for the better. Nowadays we have software to hide and obfuscate messages. In this article, we’ll take a look at some amazing steganographic tools which are tiny yet powerful.</description>
      <content>&lt;p&gt;Hiding in plain sight has many dimensions. Sometimes, whatever you
are looking for is before you, but you cannot see it; other times,
it’s right before you but you don’t notice.&lt;/p&gt;
&lt;p&gt;Steganography has been an art since the &lt;a href=&#34;https://en.wikipedia.org/wiki/Steganography#History&#34;&gt;ancient&lt;/a&gt; days used to write
hidden messages. It has evolved over the ages, and has changed form
for the better. Nowadays we have software to hide and obfuscate
messages. In this article, we’ll take a look at some amazing
steganographic tools which are tiny yet powerful.&lt;/p&gt;
&lt;h1 id=&#34;steghide&#34;&gt;Steghide&lt;/h1&gt;
&lt;p&gt;Steghide is one of the most popular steganographic tools out there.
It comes preinstalled in some of the GNU/Linux distributions. If
it’s not installed, you can download it from your package manager or
you can check their &lt;a href=&#34;https://github.com/StefanoDeVuono/steghide&#34;&gt;Github&lt;/a&gt;. It can hide data inside images and audio
files, it supports JPEG, BMP, WAV and AU formats.&lt;/p&gt;
&lt;p&gt;Let’s create a text file named secret.txt and try to hide it inside
an image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;steghide embed -cf yoda.jpg -ef secret.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here -cf is cover file and -ef is embed file. The caveat is, you
should make sure your cover file is larger than your embed file,
that’s a no brainer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let’s delete the secret.txt and see if we can extract it back
from the cover file.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;steghide extract -sf yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here the -sf is stego file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our secret.txt is extracted. Wanna see what’s inside?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;strings&#34;&gt;Strings&lt;/h1&gt;
&lt;p&gt;Let’s digress from the topic a bit. Strings is a command line tool
that helps to display printable strings in a file. In a sense, it’s
just like cat command. If you didn’t know already, now it’s a chance
to explore it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;strings can be super helpful in steganographic challenges. For
instance, let’s say, a flag or password is embedded inside an image
file. And you have to match or put printable strings together in
order to solve the challenge.&lt;/p&gt;
&lt;p&gt;If you cat out the file, you will end up with gibberish characters
printed out on to your screen.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;Whereas, if you use strings, you’ll get a bunch of strings with
printable characters.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;strings yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;Among them, one of it might be your password or flag or a clue to
the next stage.&lt;/p&gt;
&lt;h1 id=&#34;exiftool&#34;&gt;Exiftool&lt;/h1&gt;
&lt;p&gt;Exif is a good place to hide your secret message. Exiftool helps to
view the information about metadata of images or files. Besides,
embedding secret messages, exif data could provide some juicy
information about the image, such as, geo coordinates, camera model,
creation date and so on. You can use simple tools like gThumb or
GIMP to edit medtadata.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exiftool yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;binwalk&#34;&gt;Binwalk&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kali.org/tools/binwalk/&#34;&gt;Binwalk&lt;/a&gt; is a tool for searching binary images for embedded files and
executable code. It is actually a forensic tool, which helps to
analyse and audit binaries. It gives plenty of options to tinker
around binary files. Let’s see couple of options.&lt;/p&gt;
&lt;p&gt;Here we have source code of a web page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;It just displays the embedded data in a given file.
If you want to extract the data from a binary, use -e flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;The file is extracted to _OpenShot-v2.6.1-x86_64.AppImage.extracted
folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;wavsteg&#34;&gt;Wavsteg&lt;/h1&gt;
&lt;p&gt;WavSteg is a tool written in Python, which can hide data in files
with a wav format.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stegolsb wavsteg -h -i piano.wav -s secret.txt -o stego.wav -n 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;While extracting data, you have to specify the exact size of
embedded file(secret.txt) in bytes&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;other-useful-resources&#34;&gt;Other Useful Resources&lt;/h1&gt;
&lt;p&gt;There are many online tools and professional software that could
facilitate steganography. Some of them are in the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dcode.fr/&#34;&gt;decode.fr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Paradoxis/StegCracker&#34;&gt;StegCracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zed-0xff/zsteg&#34;&gt;Zsteg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/korczis/foremost&#34;&gt;Foremost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eugenekolo/sec-tools/tree/master/stego/stegsolve/stegsolve&#34;&gt;Stegsolve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sonicvisualiser.org/&#34;&gt;Sonic Visualiser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
