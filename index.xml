<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My homepage on Osint For All</title>
    <link>/</link>
    <description>Recent content in My homepage on Osint For All</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Arrays Are Powerful In Bash</title>
      <link>/linux/aib/aib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/linux/aib/aib/</guid>
      <description>“$” might symbolize dollars to many of you, but for bash users it’s the holy grail for retrieving stored data. Speaking of which, do you know what’s the common place to store a piece of data? A variable.
Variable The name itself incurs that variable is something that could be varied. So is it like a chameleon that changes colors all the time? Not precisely, if you remember from the intro its a common place to store a piece of data.</description>
      <content>&lt;p&gt;&lt;img src=&#34;/linux/AIB/1.png&#34; alt=&#34;eye&#34;&gt;&lt;/p&gt;
&lt;p&gt;“$” might symbolize dollars to many of you, but for bash users it’s
the holy grail for retrieving stored data. Speaking of which, do you
know what’s the common place to store a piece of data? A variable.&lt;/p&gt;
&lt;h1 id=&#34;variable&#34;&gt;Variable&lt;/h1&gt;
&lt;p&gt;The name itself incurs that variable is something that could be
varied. So is it like a chameleon that changes colors all the time?
Not precisely, if you remember from the intro its a common place to
store a piece of data. That’s right. Mathematically and
computationally, a variable is something that stores or holds a
piece of data or value.&lt;/p&gt;
&lt;p&gt;You might have heard the term “place holder” and that’s exactly what
a variable is. So how to store and retrieve information through
variables?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;place=&amp;#34;World&amp;#34;
echo &amp;#34;Hello $place&amp;#34; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the above code snippet, place is a variable and World is the
value assigned to the variable. In the next line, the value assigned to the variable is retrieved through echo command. As
aforementioned, “$” is the holy grail to retrieve stored value in
bash. An important thing to note here is, “=” doesn’t mean variable
name has a constant value, it just means that a value is assigned to
a variable name.&lt;/p&gt;
&lt;p&gt;Now the value of variable place could be varied.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;place=&amp;#34;Mars&amp;#34;
echo &amp;#34;Hello $place&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now the value of variable has changed to Mars from World. Imagine a
box where you could place an item and replace that item whenever you
wish.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if you want to store many pieces of data in a single box?&lt;/p&gt;
&lt;h1 id=&#34;array&#34;&gt;Array&lt;/h1&gt;
&lt;p&gt;Array is an ordered series of arrangement. Computationally, array
holds multiple values, whereas a normal variable holds a single
value. Array could also be defined as a special type of variable as
it could hold more than one value.
A typical array consists of an array name and an index. Each index
number associates with an element in the array.
Lets see how to create an array.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;movies=(&amp;#39;Primer&amp;#39; &amp;#39;Inception&amp;#39; &amp;#39;Enemy&amp;#39; &amp;#39;Tenet&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Two things to keep in mind. Unlike other programming languages, bash
arrays are not led by commas after every element but spaces. There
is no space after array name(i.e, movies=), it’s followed by “=”. If
there is a space followed by the array name, shell interprets the
array name as a program to execute and “=” as the first parameter.&lt;/p&gt;
&lt;p&gt;Now lets try to retrieve all the elements of the array.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you could see in the above screenshot, you could retrieve the
array elements in two ways: one using the @ symbol between the
square brackets or using * symbol.&lt;/p&gt;
&lt;p&gt;Here are some tips, you could remember @ by memorizing it like all
and * is a wild card which signifies everything. The syntax of
retrieving an array could look intimidating, so always remember “$”
is the holy grail for retrieving information, array names are placed
in between flower brackets {}, followed by special characters or
numbers in square brackets.&lt;/p&gt;
&lt;p&gt;Lets see how to retrieve an individual element of the array.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;Index numbers in bash arrays starts with 0 (similar to most of the
programming language, unlike R). So index 2 returns the value of
Enemy.&lt;/p&gt;
&lt;p&gt;Let’s see what happens when negative indices are used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;So the negative index number retrieves values from reverse order.&lt;/p&gt;
&lt;p&gt;You could also assign elements to the array explicitly in three
ways: Subscript Assignment, Index Assignment and assignment by name.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Subscript Assignment&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;movies=([4]=&amp;#39;Ten cloverfield lane&amp;#39; [5]=&amp;#39;Timecrimes&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Index Assignment&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;movies[1]=&amp;#39;Vanilla Sky&amp;#39;
movies[2]=&amp;#39;Mr.Nobody&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Assignment by names&lt;/em&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;movies[zero]=&amp;#39;Magnolia&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if you want to print the elements from one particular index to
another?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you are telling the array that from all its elements(@) , print
from index 1 to index 3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you are telling the array that from all its elements(@), start
from index 1 and print all the following elements.&lt;/p&gt;
&lt;p&gt;What if, you want to access the index numbers?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;${!movies[@]}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;The “!” symbol before array name helps to retrieve indices.&lt;/p&gt;
&lt;p&gt;What if you want to see how many elements are there in an array?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;echo &amp;#34;${#movies[@]}&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;p&gt;The “#” symbol before array name helps to retrieve number of
elements.&lt;/p&gt;
&lt;p&gt;How to retrieve specific information from an element in the array?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/16.png&#34; alt=&#34;16&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here the information of zeroth element(Magnolia) is retrieved,
starting from index 0 till index 2(not included).&lt;/p&gt;
&lt;p&gt;What if you want to assign a sequence of numbers? You could do it
manually but here’s a easy way to do it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/17.png&#34; alt=&#34;17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;seq&lt;/em&gt; is a shell command that prints out sequence of numbers. In the
above example, &lt;em&gt;seq&lt;/em&gt; is placed in between ` `.&lt;/p&gt;
&lt;p&gt;Now lets try to write a simple shell script from the above
learnings.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/linux/AIB/usr/linux/AIB/bin/linux/AIB/bash
tvshows=(&amp;#39;Mr.Robot&amp;#39; &amp;#39;Homeland&amp;#39; &amp;#39;The Americans&amp;#39; &amp;#39;Death Note&amp;#39; &amp;#39;Erased&amp;#39;)
for a in &amp;#34;${!tvshows[@]}&amp;#34;; do
printf &amp;#34;${tvshows[$a]} has an index number of $a\n&amp;#34;
done
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s save the code as lp.sh. Next lets make it executable – chmod
+x lp.sh.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/18.png&#34; alt=&#34;18&#34;&gt;&lt;/p&gt;
&lt;p&gt;When the program is executed, you get the above result.&lt;/p&gt;
&lt;h1 id=&#34;array-modification&#34;&gt;Array Modification&lt;/h1&gt;
&lt;p&gt;Lets create a new array.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;names=(&amp;#39;Luther&amp;#39; &amp;#39;Ambrose&amp;#39; &amp;#39;Reddington&amp;#39; &amp;#39;Mare&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To change the value of index 2 you could do the following.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;names[2]=’Carrie’
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/19.png&#34; alt=&#34;19&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if, you want to append values by adding more elements to the
array?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/20.png&#34; alt=&#34;20&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if, you want to add an element at a particular index position?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/21.png&#34; alt=&#34;21&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if you want to delete an element?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/22.png&#34; alt=&#34;22&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, unset is a &lt;a href=&#34;https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiUoa6yh6v4AhXsSmwGHQMKDlMQFnoECAUQAQ&amp;amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FShell_builtin&amp;amp;usg=AOvVaw1BOf5zWyabXMcp7cEqn3O5&#34;&gt;shell builtin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/23.png&#34; alt=&#34;23&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if you want to merge two arrays?&lt;/p&gt;
&lt;p&gt;Lets create another array.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;surnames=(&amp;#39;Dexter&amp;#39; &amp;#39;Hannibal&amp;#39; &amp;#39;Broody&amp;#39; &amp;#39;Dan&amp;#39; &amp;#39;Gordan&amp;#39; &amp;#39;Steve&amp;#39;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/24.png&#34; alt=&#34;24&#34;&gt;&lt;/p&gt;
&lt;p&gt;What if you want to delete an array?&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;unset &amp;lt;array_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/linux/AIB/25.png&#34; alt=&#34;25&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;associative-array&#34;&gt;Associative Array&lt;/h1&gt;
&lt;p&gt;An associative array is an array that stores string value as an
index. It could be declared and used in a bash script. This feature
was added in bash 4. To be sure, just check your bash version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/26.png&#34; alt=&#34;26&#34;&gt;&lt;/p&gt;
&lt;p&gt;Declaring an associative array is easy, here’s the syntax.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;declare -A &amp;lt;array_name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets declare an associative array and initialize some elements.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/27.png&#34; alt=&#34;27&#34;&gt;&lt;/p&gt;
&lt;p&gt;Like in normal array, if you want to access an element of the array,
use the following syntax.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/28.png&#34; alt=&#34;28&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you want to list the indices of the associative array, do the
following.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/29.png&#34; alt=&#34;29&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now lets try to write a simple script to print the indices(keys) and
values of the associative array.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/30.png&#34; alt=&#34;30&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here’s a catch, what if you want to display the indices in an
alphabetic order?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/31.png&#34; alt=&#34;31&#34;&gt;&lt;/p&gt;
&lt;p&gt;To reverse it, use –reverse flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/linux/AIB/32.png&#34; alt=&#34;32&#34;&gt;&lt;/p&gt;
&lt;p&gt;Well that’s it for today. Do practice arrays; because they are
powerful! Show some love by sharing and subscribing to &lt;a href=&#34;https://www.youtube.com/channel/UCLi7utjkBxAYPtVQhTuiZ2Q&#34;&gt;Linux For Love &amp;amp; Passion&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Email Investigations – Accessibility And Limitations.</title>
      <link>/articles/email/email/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/email/email/</guid>
      <description>Even in the age of instant messaging apps, email still serves as an ‘official’ medium to communicate between two parties. It’s ironic that electronic mail has not lost its charm till date within the barrage of privacy respecting encrypted chat messengers.
Instead, email services nowadays are adapting to the new age norm of privacy and making their products more privacy hardened with encrypted mailboxes or hard to locate data centers and so on.</description>
      <content>&lt;p&gt;Even in the age of instant messaging apps, email still serves as an
‘official’ medium to communicate between two parties. It’s ironic
that electronic mail has not lost its charm till date within the
barrage of privacy respecting encrypted chat messengers.&lt;/p&gt;
&lt;p&gt;Instead, email services nowadays are adapting to the new age norm of
privacy and making their products more privacy hardened with
encrypted mailboxes or hard to locate data centers and so on. But
the core technology behind email hasn’t changed since its inception.&lt;/p&gt;
&lt;h1 id=&#34;first-steps&#34;&gt;First Steps&lt;/h1&gt;
&lt;p&gt;It has become a tradition for any experienced or rookie
investigators to start their investigation just by ‘Googling’ stuff
out. Finding information about emails is no different, an email that
has to be investigated could be played around in a variety of forms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Raw Email&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a plain email is put in the search bar, the results are limited
to the fact that how often that email has been used in public and
how open it is to the public. To simplify, if the email is used on
multiple blogs, academic websites, personal websites, social media,
paste bins, forums etc,. There is a strong chance of retrieving the
information about the keywords in the email.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/email/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;From the above image, it’s evident that Google search engine
retrieved the information with some keywords involved within the
email. It recognized some keywords like ‘john’, ‘snow’, and ‘gmail’.
But it didn’t point towards the exact email; why? Because the exact
email wasn’t open for viewing in the wild. Interestingly it also
tried to match the keywords from different social media such as
Twitter and Pininterest. Endless scrolling and jumping to each page
might lead to the exact email or might not, and that’s the
limitation for the investigators and a slight win for privacy
settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Quotes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Adding quotes around the email tells the search engine to look for
the exact keywords that’s specified within the quotes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/email/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Surprisingly, with quotes the email led to one of the primary
sources of information.&lt;/p&gt;
&lt;p&gt;Bottom line, using quotes around an email tries to retrieve specific
information if it exists on the internet.&lt;/p&gt;
&lt;p&gt;That’s it? Is it that easy to retrieve information on anyone just by
Googling the email address? Well, the answer is no.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/email/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/email/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;As aforementioned, Google or any search engines could retrieve the
information only if they are present on the internet. It depends on
a lot of factors such as one’s privacy settings, social engagement,
relevance, repeated usage of the same email, or being public and so
on.&lt;/p&gt;
&lt;h1 id=&#34;dorking&#34;&gt;Dorking&lt;/h1&gt;
&lt;p&gt;Google dorking is an advanced way of searching results on the
internet. Other search engines such as DuckDuckGo, Bing,
Startpage, Brave Search and so on could also be used for dorking.
Basically, dorking lets the user concise the search results and
provide the accurate result as possible. And dorking is not only
limited to search engines, prominent social media platforms like
Twitter, Facebook, TikTok, Vkontakte etc,. have their own set of
dorks. Yet again, it depends on the information that’s already
available and privacy measures of the user. An article about
advanced search operators/dorks could be found &lt;a href=&#34;https://theamoghavarsha.medium.com/advanced-search-operators-1cb514c6cda8&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;potential-places-to-look-for-email&#34;&gt;Potential Places To Look For Email&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Public Files – intext:”jack@twitter.com” filetype:pdf OR filetype:docx OR filetype:xls&lt;/li&gt;
&lt;li&gt;Leaked databases&lt;/li&gt;
&lt;li&gt;Online forums&lt;/li&gt;
&lt;li&gt;Academic websites&lt;/li&gt;
&lt;li&gt;Medical websites&lt;/li&gt;
&lt;li&gt;Government websites&lt;/li&gt;
&lt;li&gt;Job search websites&lt;/li&gt;
&lt;li&gt;Automated tools&lt;/li&gt;
&lt;li&gt;Social media&lt;/li&gt;
&lt;li&gt;Chat apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tools&#34;&gt;Tools&lt;/h1&gt;
&lt;p&gt;There are several tools on the internet that promise to provide much
more information about an email address than just Googling. A caveat
here is, those tools are also scraping the data from the internet
probably with better scraping methods and algorithms. These tools
also change every now and then, due to the changes made from the
product/service provider’s end (email) or changes made in their own
code(tools). And it’s not new to the OSINT community if some service
goes down or becomes redundant, there’ll always be new tools which
could be more or less efficient and that depends on various factors
that are discussed in the previous paragraphs.&lt;/p&gt;
&lt;p&gt;Here are some tools to find information on emails.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://epieos.com/&#34;&gt;Epieos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hunter.io/email-finder&#34;&gt;Hunter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.spiderfoot.net/&#34;&gt;SpiderFoot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.maltego.com/&#34;&gt;Maltego&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://anymailfinder.com/&#34;&gt;Anymailfinder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://intelx.io/&#34;&gt;IntelligenceX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;miscellaneous-techniques&#34;&gt;Miscellaneous Techniques&lt;/h1&gt;
&lt;p&gt;Call it stalking or curiosity to know, some platforms such as Skype,
lets their users to search usernames or emails of other users. Even
in Gmail, some recommendations appear while one types an email for
the first time. Some apps also provide information about other users
when one’s contacts are synced. There could be many other apps out
there which provide a functionality to search for emails or
usernames. Another trick could be by changing language in inspect
element, or changing geographical location using proxies or VPNs to
fetch country specific results. Last but not the least, using the
power of other search engines and web scrapers along with Google.&lt;/p&gt;
&lt;h1 id=&#34;final-words&#34;&gt;Final Words&lt;/h1&gt;
&lt;p&gt;Email investigation through publicly available information is tricky
and prone to many false positives. This is because of the fact that
email service providers are becoming more closed to protect their
users’ privacy. And also, most of the search engines out there are
not &lt;a href=&#34;https://en.wikipedia.org/wiki/Open_source&#34;&gt;open source&lt;/a&gt;, it means no one knows how their algorithms work or how exactly they query information time to time and how a particular
information is queried. This is a challenge for many SEO experts and
email marketers to update themselves and understand how search
engines function and change overtime. There are dorks, but again
their use cases are limited. But the use of emails seems to not stop
anytime soon.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Steganographic Tools For Beginners</title>
      <link>/articles/steganography/steganography/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/articles/steganography/steganography/</guid>
      <description>Hiding in plain sight has many dimensions. Sometimes, whatever you are looking for is before you, but you cannot see it; other times, it’s right before you but you don’t notice.
Steganography has been an art since the ancient days used to write hidden messages. It has evolved over the ages, and has changed form for the better. Nowadays we have software to hide and obfuscate messages. In this article, we’ll take a look at some amazing steganographic tools which are tiny yet powerful.</description>
      <content>&lt;p&gt;Hiding in plain sight has many dimensions. Sometimes, whatever you
are looking for is before you, but you cannot see it; other times,
it’s right before you but you don’t notice.&lt;/p&gt;
&lt;p&gt;Steganography has been an art since the &lt;a href=&#34;https://en.wikipedia.org/wiki/Steganography#History&#34;&gt;ancient&lt;/a&gt; days used to write
hidden messages. It has evolved over the ages, and has changed form
for the better. Nowadays we have software to hide and obfuscate
messages. In this article, we’ll take a look at some amazing
steganographic tools which are tiny yet powerful.&lt;/p&gt;
&lt;h1 id=&#34;steghide&#34;&gt;Steghide&lt;/h1&gt;
&lt;p&gt;Steghide is one of the most popular steganographic tools out there.
It comes preinstalled in some of the GNU/Linux distributions. If
it’s not installed, you can download it from your package manager or
you can check their &lt;a href=&#34;https://github.com/StefanoDeVuono/steghide&#34;&gt;Github&lt;/a&gt;. It can hide data inside images and audio
files, it supports JPEG, BMP, WAV and AU formats.&lt;/p&gt;
&lt;p&gt;Let’s create a text file named secret.txt and try to hide it inside
an image.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;steghide embed -cf yoda.jpg -ef secret.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here -cf is cover file and -ef is embed file. The caveat is, you
should make sure your cover file is larger than your embed file,
that’s a no brainer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/2.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let’s delete the secret.txt and see if we can extract it back
from the cover file.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;steghide extract -sf yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here the -sf is stego file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Our secret.txt is extracted. Wanna see what’s inside?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/5.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;strings&#34;&gt;Strings&lt;/h1&gt;
&lt;p&gt;Let’s digress from the topic a bit. Strings is a command line tool
that helps to display printable strings in a file. In a sense, it’s
just like cat command. If you didn’t know already, now it’s a chance
to explore it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/6.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt;
&lt;p&gt;strings can be super helpful in steganographic challenges. For
instance, let’s say, a flag or password is embedded inside an image
file. And you have to match or put printable strings together in
order to solve the challenge.&lt;/p&gt;
&lt;p&gt;If you cat out the file, you will end up with gibberish characters
printed out on to your screen.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/7.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt;
&lt;p&gt;Whereas, if you use strings, you’ll get a bunch of strings with
printable characters.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;strings yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/8.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt;
&lt;p&gt;Among them, one of it might be your password or flag or a clue to
the next stage.&lt;/p&gt;
&lt;h1 id=&#34;exiftool&#34;&gt;Exiftool&lt;/h1&gt;
&lt;p&gt;Exif is a good place to hide your secret message. Exiftool helps to
view the information about metadata of images or files. Besides,
embedding secret messages, exif data could provide some juicy
information about the image, such as, geo coordinates, camera model,
creation date and so on. You can use simple tools like gThumb or
GIMP to edit medtadata.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exiftool yoda.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/9.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;binwalk&#34;&gt;Binwalk&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.kali.org/tools/binwalk/&#34;&gt;Binwalk&lt;/a&gt; is a tool for searching binary images for embedded files and
executable code. It is actually a forensic tool, which helps to
analyse and audit binaries. It gives plenty of options to tinker
around binary files. Let’s see couple of options.&lt;/p&gt;
&lt;p&gt;Here we have source code of a web page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/10.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt;
&lt;p&gt;It just displays the embedded data in a given file.
If you want to extract the data from a binary, use -e flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/11.png&#34; alt=&#34;11&#34;&gt;&lt;/p&gt;
&lt;p&gt;The file is extracted to _OpenShot-v2.6.1-x86_64.AppImage.extracted
folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/12.png&#34; alt=&#34;12&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;wavsteg&#34;&gt;Wavsteg&lt;/h1&gt;
&lt;p&gt;WavSteg is a tool written in Python, which can hide data in files
with a wav format.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;stegolsb wavsteg -h -i piano.wav -s secret.txt -o stego.wav -n 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&#34;/articles/steganography/13.png&#34; alt=&#34;13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/14.png&#34; alt=&#34;14&#34;&gt;&lt;/p&gt;
&lt;p&gt;While extracting data, you have to specify the exact size of
embedded file(secret.txt) in bytes&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/articles/steganography/15.png&#34; alt=&#34;15&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;other-useful-resources&#34;&gt;Other Useful Resources&lt;/h1&gt;
&lt;p&gt;There are many online tools and professional software that could
facilitate steganography. Some of them are in the following.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dcode.fr/&#34;&gt;decode.fr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.audacityteam.org/&#34;&gt;Audacity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Paradoxis/StegCracker&#34;&gt;StegCracker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zed-0xff/zsteg&#34;&gt;Zsteg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/korczis/foremost&#34;&gt;Foremost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/eugenekolo/sec-tools/tree/master/stego/stegsolve/stegsolve&#34;&gt;Stegsolve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sonicvisualiser.org/&#34;&gt;Sonic Visualiser&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
  </channel>
</rss>
